/*
 * RegistreBorne.cpp
 *
 *  Created on: 2018-11-09
 *      Author: etudiant
 */

#include "RegistreBorne.h"
#include "Borne.h"
#include "BorneException.h"
#include <sstream>

namespace bornesQuebec {

RegistreBorne::RegistreBorne(const std::string& p_nomRegistre):m_nomRegistreBorne(p_nomRegistre)
{
	PRECONDITION(!p_nomRegistre.empty());

	POSTCONDITION(m_nomRegistreBorne == p_nomRegistre);

	INVARIANTS();
}

/**
 * @fn reqNomRegistreBorne
 * @return une chaine de caractere
 */
const std::string& RegistreBorne::reqNomRegistreBorne() const {
	return m_nomRegistreBorne;
}

/**
 * @fn reqRegistreBorneFormate
 * @return une chaine de caractere
 */
std::string RegistreBorne::reqRegistreBorneFormate() const{
	std::ostringstream affiche;

	affiche << "Registre : " << m_nomRegistreBorne << std::endl;
	std::vector<Borne *>::const_iterator iter;
	for(iter = m_vBornes.begin(); iter < m_vBornes.end(); iter++){
		affiche << (*iter)->reqBorneFormate();
	}

	return affiche.str();
}

/**
 * @fn BorneEstDejaPresente
 * @brief verifie si une borne est déjà dans le registre
 * @param p_borne
 * @return
 */
bool RegistreBorne::BorneEstDejaPresente(const Borne& p_borne) const{

	bool present = false;
	std::vector<Borne *>::const_iterator iter;
	for(iter = m_vBornes.begin(); iter < m_vBornes.end(); iter++){
		if(*(*iter) == p_borne) //! je compare les 02 elts grace à l'opérateur== ds Borne
			present = true;
	}

	return present;

}

/**
 * @fn ajouteBorne
 * @brief on ajoute la borne dans notre vecteur s'elle n'est pas déjà présente et
 * 			dans le cas contraire, elle lance une exception
 * @param p_borne
 */
void RegistreBorne::ajouteBorne(const Borne& p_borne){

	PRECONDITION(!BorneEstDejaPresente(p_borne));
//peut-on mettre les try ici
	if(BorneEstDejaPresente(p_borne))
		throw BorneDejaPresenteException("borne déjà présente dans la liste");
	m_vBornes.push_back(p_borne.clone());
}

/**
 * @fn verifiePresenceBorne(int p_identifiant)
 * @brief permet de vérifier si une borne est présentent dans le vecteur en le parcourant
 * 			tout en vérifiant la valeur de chaque identité présent.
 * @param p_identifiant
 * @return
 */
bool RegistreBorne::verifiePresenceBorne(int p_identifiant) const{

	bool identifiantPresent = false;

	std::vector<Borne *>::const_iterator iter;

	for(iter = m_vBornes.begin(); iter < m_vBornes.end(); iter++){
		if ((*iter)->reqIdentifiant() == p_identifiant)
			identifiantPresent = true;
	}
	return identifiantPresent;
}

/**
 * @fn supprimeBorne
 * @brief on supprime la borne dans notre vecteur si elle est présente
 * @param p_borne
 */
void RegistreBorne::supprimeBorne(int p_identifiant){

	PRECONDITION(!verifiePresenceBorne(p_identifiant));

	if(!verifiePresenceBorne(p_identifiant))
		throw BorneAbsenteException("désoler, la borne n'est pas présente dans la liste");

	std::vector<Borne*>::iterator iter;
	for(iter = m_vBornes.begin(); iter < m_vBornes.end(); iter++){
		if((*iter)->reqIdentifiant() == p_identifiant){
			delete(*iter);
			iter = m_vBornes.erase(iter);
		}
	}
}



void RegistreBorne::verifieInvariant() const{
	INVARIANT(!m_nomRegistreBorne.empty());
}

/**
 * @breif destructeur des objets de notre class
 */
RegistreBorne::~RegistreBorne() {
	for(std::vector<Borne*>::iterator iter = m_vBornes.begin(); iter < m_vBornes.end(); iter++)
		delete(*iter);
}

} /* namespace bornesQuebec */
